const RleDecoder = require('./../src/RleDecoder');

const chai = require('chai');
const expect = chai.expect;

describe('RleDecoder', () => {
  it('should correctly decode basic RLE data', () => {
    // prettier-ignore
    const rleData = Uint8Array.from([
        // Number of segments
        0x01, 0x00, 0x00, 0x00,
        // First segment offset
        0x40, 0x00, 0x00, 0x00,
        // Other segment offsets
        0x00, 0x00, 0x00, 0x00, // 2
        0x00, 0x00, 0x00, 0x00, // 3
        0x00, 0x00, 0x00, 0x00, // 4
        0x00, 0x00, 0x00, 0x00, // 5
        0x00, 0x00, 0x00, 0x00, // 6
        0x00, 0x00, 0x00, 0x00, // 7
        0x00, 0x00, 0x00, 0x00, // 8
        0x00, 0x00, 0x00, 0x00, // 9
        0x00, 0x00, 0x00, 0x00, // 10
        0x00, 0x00, 0x00, 0x00, // 11
        0x00, 0x00, 0x00, 0x00, // 12
        0x00, 0x00, 0x00, 0x00, // 13
        0x00, 0x00, 0x00, 0x00, // 14
        0x00, 0x00, 0x00, 0x00, // 15
        // RLE data
        0x08, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00
    ]);
    // prettier-ignore
    const expectedDecodedData = Uint8Array.from([    
        0x00, 0xff, 0x00,
        0xff, 0x00, 0xff,
        0x00, 0xff, 0x00,
    ]);
    const expectedDecodedDataLength = expectedDecodedData.length;
    const rleDecoder = new RleDecoder(rleData);
    const decodedData = new Uint8Array(expectedDecodedDataLength);
    rleDecoder.decodeSegment(0, decodedData, 0, 1);
    expect(rleDecoder.getNumberOfSegments()).to.be.eq(1);
    expect(decodedData.length).to.be.eq(expectedDecodedDataLength);
    for (let i = 0; i < expectedDecodedDataLength; i++) {
      expect(decodedData[i]).to.be.eq(expectedDecodedData[i]);
    }
  });

  it('should throw in case of not existing segment decode', () => {
    // prettier-ignore
    const rleData = Uint8Array.from([
        // Number of segments
        0x02, 0x00, 0x00, 0x00,
        // First segment offset
        0x40, 0x00, 0x00, 0x00,
        // Other segment offsets
        0x00, 0x00, 0x00, 0x00, // 2
        0x00, 0x00, 0x00, 0x00, // 3
        0x00, 0x00, 0x00, 0x00, // 4
        0x00, 0x00, 0x00, 0x00, // 5
        0x00, 0x00, 0x00, 0x00, // 6
        0x00, 0x00, 0x00, 0x00, // 7
        0x00, 0x00, 0x00, 0x00, // 8
        0x00, 0x00, 0x00, 0x00, // 9
        0x00, 0x00, 0x00, 0x00, // 10
        0x00, 0x00, 0x00, 0x00, // 11
        0x00, 0x00, 0x00, 0x00, // 12
        0x00, 0x00, 0x00, 0x00, // 13
        0x00, 0x00, 0x00, 0x00, // 14
        0x00, 0x00, 0x00, 0x00, // 15
    ]);
    const rleDecoder = new RleDecoder(rleData);
    expect(() => {
      rleDecoder.decodeSegment(3, undefined, 0, 1);
    }).to.throw();
  });
});
